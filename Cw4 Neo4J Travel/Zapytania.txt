1. MATCH path=shortestPath((from:town{name:'Darjeeling'})-[*]-(tp:peak{name:'Sandakphu'})) RETURN path
2. MATCH path=shortestPath((from:town{name:'Darjeeling'})-[*]-(to:peak{name:'Sandakphu'})) WHERE all(road IN relationships(path)WHERE road.winter="true") RETURN path
3. MATCH path=(from:town{name:'Darjeeling'})-[*1..6]-(to:peak{name:'Sandakphu'}) with path,REDUCE(x=0, from in relationships(path)| x+from.distance)as distance order by distance RETURN distance,path
4. MATCH(flight:Flight)- [o:ORIGIN]->(airport:Airport)WITH airport, count(0)as origin order by origin DESC RETURN origin, airport
5. MATCH path=(from:Airport {name:'LAX'})<-[o1:ORIGIN]-(:Flight)-[o2:ORIGIN|DESTINATION*]->(to:Airport)WITH path, reduce(a=0,n IN [x IN nodes(path) WHERE 'Flight' IN labels(x)]| a + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) AS totalPrice WHERE totalPrice<3000 RETURN path, totalPrice
6. MATCH path=(from:Airport {name:'LAX'})<-[o1:ORIGIN]-(:Flight)-[o2:ORIGIN|DESTINATION*]->(to:Airport {name: "DAY"})WITH path, reduce(a=0,n IN [x IN nodes(path) WHERE 'Flight' IN labels(x)]| a + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) AS totalPrice RETURN path, totalPrice ORDER BY totalPrice ASC
7. MATCH path=(from:Airport {name:'LAX'})<-[o1:ORIGIN]-(:Flight)-[o2:ORIGIN|DESTINATION*]->(to:Airport {name: "DAY"})WITH path, reduce(a=0,n IN [x IN nodes(path) WHERE 'Flight' IN labels(x)]| a + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) AS totalPrice RETURN path, totalPrice ORDER BY totalPrice ASC LIMIT 1
8. MATCH path=(from:Airport {name:'LAX'})<-[o1:ORIGIN]-(:Flight)-[o2:ORIGIN|DESTINATION*]->(to:Airport {name: "DAY"})WITH path, reduce(a=0,n IN [x IN nodes(path) WHERE 'Flight' IN labels(x)]| a + [(n)<-[:ASSIGN]-(ticket {class: 'business'}) | ticket.price][0]) AS totalPrice RETURN path, totalPrice ORDER BY totalPrice ASC LIMIT 1
9. MATCH path=(from:Airport)<-[o:ORIGIN]-(flight:Flight)-[d:DESTINATION]->(to:Airport)WITH DISTINCT flight.airline AS airline_name, SIZE(COLLECT(DISTINCT [from.name, to.name])) AS number_of_connections RETURN airline_name, number_of_connections
10. MATCH path=(airport1:Airport)<-[o1:ORIGIN]-(f1:Flight)-[o2:DESTINATION]->(airport2:Airport)<-[o3:ORIGIN]-(f2:Flight)-[o4:DESTINATION]->(airport3:Airport)WHERE not(airport1=airport2) AND not(airport1=airport3)AND not(airport2=airport3) WITH path, reduce(a=0,n IN [x IN nodes(path) WHERE 'Flight' IN labels(x)]| a + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) AS totalPrice RETURN path, totalPrice ORDER BY totalPrice ASC LIMIT 1